
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  email     String   @unique
  password  String
  name      String?
  avatar    String?
  role      String   @default("user")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  
  // Relations
  articles  Article[]
  news      News[]
  comments  Comment[]
  
  @@map("users")
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique @db.VarChar(100)
  slug      String   @unique @db.VarChar(100)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  
  // Relations
  articles  Article[]
  news      News[]
  
  @@map("categories")
}

model Article {
  id         Int      @id @default(autoincrement())
  title      String   @db.VarChar(255)
  slug       String   @unique @db.VarChar(255)
  content    String   @db.LongText
  thumbnail  String?  @db.Text
  images     Json?
  status     String   @default("draft")
  
  categoryId Int      @map("category_id")
  category   Category @relation(fields: [categoryId], references: [id])
  
  authorId   Int      @map("created_by")
  author     User     @relation(fields: [authorId], references: [id])
  
  comments   Comment[]
  
  createdAt  DateTime @default(now()) @map("created_at") @db.DateTime(3)
  updatedAt  DateTime @updatedAt @map("updated_at") @db.DateTime(3)
  
  @@map("articles")
}

model News {
  id         Int      @id @default(autoincrement())
  title      String   @db.VarChar(255)
  slug       String   @unique @db.VarChar(255)
  content    String   @db.LongText
  thumbnail  String?  @db.Text
  images     Json?
  status     String   @default("draft")
  
  categoryId Int      @map("category_id")
  category   Category @relation(fields: [categoryId], references: [id])
  
  authorId   Int      @map("created_by")
  author     User     @relation(fields: [authorId], references: [id])
  
  comments   Comment[]
  
  createdAt  DateTime @default(now()) @map("created_at") @db.DateTime(3)
  updatedAt  DateTime @updatedAt @map("updated_at") @db.DateTime(3)
  
  @@map("news")
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String   @db.Text
  status    String   @default("approved")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  // Foreign keys
  userId    Int      @map("user_id")
  articleId Int?     @map("article_id")
  newsId    Int?     @map("news_id")
  parentId  Int?     @map("parent_id")
  
  // Relations
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  article   Article?  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  news      News?     @relation(fields: [newsId], references: [id], onDelete: Cascade)
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies   Comment[] @relation("CommentReplies")
  
  @@map("comments")
}

model MersifNumber {
  id        Int      @id @default(autoincrement())
  label     String   @db.VarChar(255)
  value     String   @db.VarChar(255)
  icon      String   @db.VarChar(500)
  color     String   @db.VarChar(100)
  sortOrder Int      @default(0) @map("sort_order")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  
  @@map("mersif_numbers")
}
